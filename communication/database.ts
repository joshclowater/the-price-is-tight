import postgres from "$postgres";
import * as supabase from "supabase";
import { ResourceLoader } from "@/helpers/loader.ts";
import type { Game, GameAndPlayer, GameAndPlayers } from "./types.ts";

export interface DatabaseUser {
  userId: number;
  userName: string;
}

export class Database {
  #client: supabase.SupabaseClient;

  constructor(client?: supabase.SupabaseClient) {
    this.#client = client ?? supabase.createClient(
      Deno.env.get("SUPABASE_API_URL")!,
      Deno.env.get("SUPABASE_ANON_KEY")!,
    );
  }

  async createGame(): Promise<Game> {
    const gameName = generateGameName();
    const insert = await this.#client.from("games").insert([{ name: gameName }], {
      upsert: false,
      returning: "representation",
    });

    if (insert.error) {
      if (insert.error.code !== "23505") {
        throw new Error(insert.error.message);
      }
      console.warn('Game tried to create with duplicate name. Trying again.');
      // TODO add max tries to this
      return await this.createGame();
    }

    return insert.data[0];
  }

  async getGame(gameName: string): Promise<GameAndPlayers> {
    const { data: games, error: gameError } = await this.#client.from("games")
      .select("name, status")
      .eq("name", gameName);
    if (gameError) {
      throw new Error(gameError.message);
    }
    const game = games[0];
    const { data: players, error: playersError } = await this.#client.from("players")
      .select("id, name")
      .eq("game", game.name);
    if (playersError) {
      throw new Error(playersError.message);
    }
    return { game, players };
  }

  async addPlayer(game: string, name: string): Promise<string> {
    const insert = await this.#client.from("players").insert([{ game, name }], {
      upsert: false,
      returning: "representation",
    });

    if (insert.error) {
      // if (insert.error.code !== "23505") { ... }
      throw new Error(insert.error.message);
    }

    return insert.data[0].id;
  }

  async getGameByPlayerId(playerId: string): Promise<GameAndPlayer> {
    const { data: players, error: playerError } = await this.#client.from("players")
      .select("id, name, game")
      .eq("id", playerId);
    if (playerError) {
      throw new Error(playerError.message);
    }
    if (!players.length) {
      throw new Error('Unable to find player with id');
    }
    const player = players[0];
    const { data: games, error: gameError } = await this.#client.from("games")
      .select("name, status")
      .eq("name", player.game);
    if (gameError) {
      throw new Error(gameError.message);
    }

    return { game: games[0], player };
  }

}

export const databaseLoader = new ResourceLoader<Database>({
  async load() {
    // Automatically create the database schema on startup.
    const caCert = getEnvOrThrow("SUPABASE_CA_CERTIFICATE").replace(
      /\s+(?!CERTIFICATE--)/g,
      "\n",
    );
    const sql = postgres(getEnvOrThrow("SUPABASE_POSTGRES_URI"), {
      // deno-lint-ignore no-explicit-any
      keep_alive: false as any, // Otherwise required '--unstable' flag.
      ssl: { caCerts: [caCert] },
    });
    
    // id integer generated by default as identity primary key,
    await sql`
      create table if not exists games (
        name text not null primary key,
        created_at timestamp with time zone default timezone('utc'::text, now()) not null,
        status text
      )`;

    await sql`
      create table if not exists players (
        id integer generated by default as identity primary key,
        created_at timestamp with time zone default timezone('utc'::text, now()) not null,
        name text not null,
        "game" text not null references games (name),
        unique(name, game)
      )`;

    await sql.end();
    return Promise.resolve(new Database());

    function getEnvOrThrow(name: string) {
      const value = Deno.env.get(name);
      if (value == null) {
        throw new Error(`Missing env variable: ${name}`);
      }
      return value;
    }
  },
});

const generateGameName = () => {
  let id = '';
  const possible = 'abcdefghijklmnopqrstuvwxyz';
  for (let i = 0; i < 5; i++) {
    id += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return id;
};
